#!/usr/bin/env python3
# pass in a secret and a path, and we'll print out the xpub/xpriv at that point

import argparse
import base58
import coincurve
import hashlib
import hmac
import re
import sys

from ripemd.ripemd160 import ripemd160

KEY_VERSIONS = {
     'mainnet': {
        'priv': b'\x04\x88\xAD\xE4',
        'pub': b'\x04\x88\xB2\x1E'
     },
    'testnet': {
        'priv': b'\x04\x35\x83\x94',
        'pub': b'\x04\x35\x87\xCF'
    },
}

def master_start(secret_bytes):
    secret_field = "Bitcoin seed".encode('utf-8')
    mm = hmac.new(secret_field, secret_bytes, digestmod=hashlib.sha512).digest()
    return mm[:32], mm[32:]


def get_index_bytes(path_str):
    index = 0

    if path_str == 'm':
        path_str = '0'
    elif path_str.endswith('h') or path_str.endswith("'"):
        index = 2 ** 31
        path_str = path_str[:-1]

    index += int(path_str)
    return index.to_bytes(4, 'big')


def find_fingerprint(privkey):
    pubkey = coincurve.PrivateKey(privkey).public_key.format()
    hash160 = ripemd160(hashlib.sha256(pubkey).digest())
    return hash160[:4]


def derive_priv_child(privkey, chaincode, path_str):
    idx_bytes = get_index_bytes(path_str)
    if int.from_bytes(idx_bytes, 'big') >= 2 ** 31:
        data = b'\x00' + privkey
    else:
        data = coincurve.PrivateKey(privkey).public_key.format()
    xkey = hmac.new(chaincode, data + idx_bytes, digestmod=hashlib.sha512).digest()
    child_offset = xkey[:32]
    child_chaincode = xkey[32:]
    child_privkey = bytes.fromhex(coincurve.PrivateKey(privkey).add(child_offset).to_hex())
    return (child_privkey, child_chaincode)


def _pub_print(version, depth, fingerprint, data, chaincode, path_str):
    idx_bytes = get_index_bytes(path_str)
    info = version +  \
           depth.to_bytes(1, 'big') + \
           fingerprint +  \
           idx_bytes + \
           chaincode + \
           data
    cksum = hashlib.sha256(hashlib.sha256(info).digest()).digest()[:4]
    return base58.b58encode(info + cksum)


def xpub_print(version, depth, fingerprint, privkey, chaincode, path_str):
    data = coincurve.PrivateKey(privkey).public_key.format()
    return _pub_print(version, depth, fingerprint, data, chaincode, path_str)

def xprv_print(version, depth, fingerprint, privkey, chaincode, path_str):
    data = b'\x00' + privkey
    return _pub_print(version, depth, fingerprint, data, chaincode, path_str)
    

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("secret")
    parser.add_argument("derivation_path")

    # Default network is 'testnet'j
    parser.add_argument("-n", "--network", default='testnet')

    args = parser.parse_args()

    secret = bytes.fromhex(args.secret)
    path = args.derivation_path.split('/')
    
    # first must be 'm'
    if path[0] != 'm':
        sys.stderr.write("Path must start with 'm' {}\n".format(args.derivation_path))
        return 1

    if args.network not in KEY_VERSIONS:
        sys.stderr.write("Network '{}' not supported, try one of: {}\n".format(args.network, list(KEY_VERSIONS.keys())))
        return 1

    # path pattern! 
    pattern = "^[0-9]+['|h]?$"
    if any([re.match(pattern, pp) is None for pp in path[1:]]):
        sys.stderr.write("Path is invalid. {}\n".format(path))
        return 1

    depth = 0
    privkey, chaincode = master_start(secret)
    master_fgpr = find_fingerprint(privkey)
    parent_fgpr = b'\x00' * 4

    for pp in path[1:]: 
        parent_fgpr = find_fingerprint(privkey)
        privkey, chaincode = derive_priv_child(privkey, chaincode, pp)


    vers = KEY_VERSIONS[args.network]
    xpub = xpub_print(vers['pub'], len(path) - 1, parent_fgpr, privkey, chaincode, path[-1])
    xprv = xprv_print(vers['priv'], len(path) - 1, parent_fgpr, privkey, chaincode, path[-1])

    if args.derivation_path == 'm':
        print('ext-public:', str(xpub, 'utf-8')) 
        print('ext-prvate:', str(xprv, 'utf-8')) 
    else:
        print('ext-public:', '[{}/{}]{}'.format(master_fgpr.hex(), ('/').join(path[1:]), str(xpub, 'utf-8')))
        print('ext-prvate:', '[{}/{}]{}'.format(master_fgpr.hex(), ('/').join(path[1:]), str(xprv, 'utf-8')))
    return 0
        

if __name__ == "__main__":
    main()
